Generics and Subtyping.
Let is test your understanding of generics. Is the following code snippet legal?

List<String> ls = new ArrayList<String>();
List<Object> lo = ls;

First line is certainly legal. The trickier part of the question is line two. This boils down to the question is a List of String a List of Object. Most people instinctively answer - Sure!
Well, take a look at the next few lines.

lo.add(new Object());
String s = ls.get(0);

Here we have aliased ls and lo. Accessing ls, a list of String, through the alias lo, we can insert arbitrary objects into it. As a result ls does not hold just Strings anymore, and when we try and get something out of it, we get a rude surprise.
The Java compiler will prevent this from happening of course. Second line will cause a compile time error.
In general, if Foo is a subtype (subclass or subinterface) of Bar, and G is some generic type declaration, it is not the case that G<Foo> is a subtype of G<Bar>. This is probably the hardest thing you need to learn about generics, because it goes against our deeply held intuitions.
We should not assume that collections do not change. Our instinct may lead us to think of these things as immutable.
For example, if the department of motor vehicles supplies a list of drivers to the census bureau, this seems reasonable. We think that a List<Driver> is a List<Person>, assuming that Driver is a subtype of Person. In fact, what is being passed is a copy of the registry of drivers. Otherwise, the census bureau could add new people who are not drivers into the list, corrupting the DMV records.
To cope with this sort of situation, it is useful to consider more flexible generic types. The rules we have seen so far are quite restrictive.

Enum Types.
An enum type is a type whose fields consist of a fixed set of constants. Common examples include compass directions (values of NORTH, SOUTH, EAST, and WEST) and the days of the week.
Because they are constants, the names of an enum types fields are in uppercase letters.
You should use enum types any time you need to represent a fixed set of constants. That includes natural enum types such as the planets in our solar system and data sets where you know all possible values at compile time - for example, the choices on a menu, command line flags, and so on.
Here is some code that shows you how to use the Day enum defined above.

public class EnumTest {
	Day day;
	public EnumTest(Day day) {
		this.day = day;
	}

	public void tellItLikeItIs() {
		switch (day) {
			case MONDAY: System.out.println("Mondays are bad.");
					     break;
			case FRIDAY: System.out.println("Fridays are better.");
					     break;
			case SATURDAY: System.out.println("Saturdays are best.");
					     break;
			case SUNDAY: System.out.println("Sundays are best of the best.");
					     break;
			default:	 System.out.println("Midweek days are so-so.");
					     break;
		}
	}

	public static void main(String[] args) {
		EnumTest firstDay = new EnumTest(Day.MONDAY);
		firstDay.tellItLikeItIs();
		EnumTest thirdDay = new EnumTest(Day.WEDNESDAY);
		thirdDay.tellItLikeItIs();
		EnumTest fifthDay = new EnumTest(Day.FRIDAY);
		fifthDay.tellItLikeItIs();
		EnumTest sixthDay = new EnumTest(Day.SATURDAY);
		sixthDay.tellItLikeItIs();
		EnumTest seventhDay = new EnumTest(Day.SUNDAY);
		seventhDay.tellItLikeItIs();
	}
}

The output.
Mondays are bad.
Midweek days are so-so.
Fridays are better.
Saturdays are best.
Sundays are best of the best.

Java programming language enum types are much more powerful than their counterparts in other languages. The enum declaration defines a class (called an enum type). The enum class body can include methods and other fields. The compiler automatically adds some special methods when it creates an enum. For example, they have a static values method that returns an array containing all of the values of the enum in the order they are declared. This method is commonly used in combination with the for-each construct to iterate over the values of an enum type.
